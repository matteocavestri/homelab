services:
  # ---------------------------------------------------------------------------------------------------
  grafana:
    image: grafana/grafana-oss:11.0.0
    container_name: grafana
    networks:
      - monitoring
      - proxy
    restart: unless-stopped
    environment:
      GF_USERS_VIEWERS_CAN_EDIT: "true"
      GF_SERVER_ROOT_URL: ${URL}
      GF_AUTH_GENERIC_OAUTH_ENABLED: "true"
      GF_AUTH_GENERIC_OAUTH_NAME: ${AUTH_NAME}
      GF_AUTH_GENERIC_OAUTH_CLIENT_ID: ${AUTH_CLIENT_ID}
      GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: ${AUTH_CLIENT_SECRET}
      GF_AUTH_GENERIC_OAUTH_SCOPES: ${OAUTH_SCOPES}
      GF_AUTH_GENERIC_OAUTH_AUTH_URL: ${AUTH_URL}
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL: ${AUTH_URL_TOKEN}
      GF_AUTH_GENERIC_OAUTH_API_URL: ${AUTH_URL_API}
      GF_AUTH_SIGNOUT_REDIRECT_URL: ${AUTH_URL_REDIRECT}
      GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH: ${OAUTH_ROLE}
    volumes:
      - ${GRAFANA_DATA}:/var/lib/grafana
    labels:
      - traefik.enable=true
      - traefik.docker.network=monitoring-proxy
      - traefik.http.routers.grafana.rule=Host(`${HOST}`)
      - traefik.http.routers.grafana.entrypoints=https
      - traefik.http.routers.grafana.tls.certresolver=${RESOLVER}
      - traefik.http.routers.grafana.tls=true
      - traefik.http.services.grafana.loadbalancer.server.port=3000
  # ---------------------------------------------------------------------------------------------------
  uptimekuma:
    image: louislam/uptime-kuma:1.23.13-alpine
    container_name: uptimekuma
    volumes:
      - ${CONFIG_PATH}:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - traefik.enable=true
      - traefik.http.routers.uptimekuma-https.entrypoints=https
      - traefik.http.routers.uptimekuma-https.rule=Host(`${HOST_UPTIMEKUMA}`)
      - traefik.http.routers.uptimekuma-https.tls=true
      - traefik.http.routers.uptimekuma-https.tls.certresolver=${RESOLVER}
      - traefik.http.routers.uptimekuma-https.middlewares=authentik@file
    networks:
      - proxy
    restart: unless-stopped
  # ---------------------------------------------------------------------------------------------------
  speedtest-tracker:
    container_name: speedtest-tracker
    environment:
      - PUID=1000
      - PGID=1000
      - DB_CONNECTION=sqlite
    labels:
      - traefik.enable=true
      - traefik.http.routers.speedtest-tracker.rule=Host(`${HOST_SPEEDTEST}`)
      - traefik.http.routers.speedtest-tracker.entrypoints=https
      - traefik.http.routers.speedtest-tracker.tls.certresolver=${RESOLVER}
      - traefik.http.routers.speedtest-tracker.tls=true
      - traefik.http.services.speedtest-tracker.loadbalancer.server.port=80
    volumes:
      - ${SPEEDTEST_CONFIG_PATH}:/config
    image: lscr.io/linuxserver/speedtest-tracker:v0.19.0-ls21
    restart: unless-stopped
    networks:
      - proxy
  # ---------------------------------------------------------------------------------------------------
  prometheus:
    image: docker.io/prom/prometheus:v2.53.0
    container_name: prometheus
    ports:
      - 9090:9090
    networks:
      - monitoring
    command: --config.file=/etc/prometheus/prometheus.yaml
    volumes:
      - ${PROMETHEUS_CONFIG_FILE}:/etc/prometheus/prometheus.yaml:ro
      - ${PROMETHEUS_DATA}:/prometheus
    restart: unless-stopped
  # ---------------------------------------------------------------------------------------------------
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor
    ports:
      - 8080:8080
    networks:
      - monitoring
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true
    restart: unless-stopped
  # ---------------------------------------------------------------------------------------------------
  node_exporter:
    image: quay.io/prometheus/node-exporter:v1.8.1
    container_name: node_exporter
    command: --path.rootfs=/host
    pid: host
    networks:
      - monitoring
    restart: unless-stopped
    volumes:
      - /:/host:ro,rslave
  # ---------------------------------------------------------------------------------------------------
  nvidia_exporter:
    image: utkuozdemir/nvidia_gpu_exporter:1.2.1
    container_name: nvidia_exporter
    restart: unless-stopped
    devices:
      - /dev/nvidiactl:/dev/nvidiactl
      - /dev/nvidia0:/dev/nvidia0
    volumes:
      - /usr/lib/x86_64-linux-gnu/libnvidia-ml.so:/usr/lib/x86_64-linux-gnu/libnvidia-ml.so
      - /usr/lib/x86_64-linux-gnu/libnvidia-ml.so.1:/usr/lib/x86_64-linux-gnu/libnvidia-ml.so.1
      - /usr/bin/nvidia-smi:/usr/bin/nvidia-smi
    ports:
      - 9835:9835
    networks:
      - monitoring
  # ---------------------------------------------------------------------------------------------------
  loki:
    image: grafana/loki:k200-f00a0da
    container_name: loki
    volumes:
      - ${LOKI_CONFIG_PATH}:/etc/loki
    ports:
      - 3100:3100
    restart: unless-stopped
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - monitoring
  # ---------------------------------------------------------------------------------------------------
  promtail:
    image: grafana/promtail:k200-f00a0da
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - ${PROMTAIL_CONFIG_PATH}:/etc/promtail
    ports:
      - 1514:1514
    restart: unless-stopped
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - monitoring
  # ---------------------------------------------------------------------------------------------------
  graphite:
    image: graphiteapp/graphite-statsd:1.1.10-5
    container_name: graphite
    restart: always
    ports:
      - 8085:80
      - 2003-2004:2003-2004
      - 2023-2024:2023-2024
      - 8125:8125/udp
      - 8126:8126
    volumes:
      - ${GRAPHITE_DATA}:/opt/graphite/storage
      - ${GRAPHITE_LOGS}:/var/log
    networks:
      - monitoring
  # ---------------------------------------------------------------------------------------------------
  influxdb:
    image: influxdb:2.7.6-alpine
    container_name: influxdb
    ports:
      - 8086:8086
    volumes:
      - /mnt/nfs/data/influxdb:/var/lib/influxdb2
      - /mnt/nfs/config/influxdb:/etc/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUX_USER}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUX_PASS}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUX_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUX_BUCKET}
    networks:
      - monitoring
    restart: unless-stopped
  # ---------------------------------------------------------------------------------------------------
  pihole-exporter:
    container_name: pihole-exporter
    image: ekofr/pihole-exporter:v0.4.0
    environment:
      PIHOLE_PROTOCOL: http
      PIHOLE_HOSTNAME: pihole
      PIHOLE_PASSWORD: ${WEBPASSWORD}
      INTERVAL: 30s
      PORT: 9617
    ports:
      - 9617:9617
    volumes:
      - /etc/ssl/certs:/etc/ssl/certs:ro
    networks:
      - backend
      - monitoring
    restart: always
    # ---------------------------------------------------------------------------------------------------
  sonarr-exporter:
    image: ghcr.io/onedr0p/exportarr:v2.0.1
    container_name: sonarr-exporter
    command:
      - sonarr
    environment:
      PORT: 9707
      URL: ${URL_SONARR}
      APIKEY: ${APIKEY_SONARR}
      ENABLE_ADDITIONAL_METRICS: true
    networks:
      - monitoring
      - gluetun
    ports:
      - 9707:9707
    restart: unless-stopped
  # -----------------------------------------------------------------------------------------------------
  radarr-exporter:
    image: ghcr.io/onedr0p/exportarr:v2.0.1
    container_name: radarr-exporter
    command:
      - radarr
    environment:
      PORT: 9708
      URL: ${URL_RADARR}
      APIKEY: ${APIKEY_RADARR}
      ENABLE_ADDITIONAL_METRICS: true
    networks:
      - monitoring
      - gluetun
    ports:
      - 9708:9708
    restart: unless-stopped
  # --------------------------------------------------------------------------------------------------------
  lidarr-exporter:
    image: ghcr.io/onedr0p/exportarr:v2.0.1
    container_name: lidarr-exporter
    command:
      - lidarr
    environment:
      PORT: 9709
      URL: ${URL_LIDARR}
      APIKEY: ${APIKEY_LIDARR}
      ENABLE_ADDITIONAL_METRICS: true
    networks:
      - monitoring
      - gluetun
    ports:
      - 9709:9709
    restart: unless-stopped
  # --------------------------------------------------------------------------------------------------------
  prowlarr-exporter:
    image: ghcr.io/onedr0p/exportarr:v2.0.1
    container_name: prowlarr-exporter
    command:
      - prowlarr
    environment:
      PORT: 9710
      URL: ${URL_PROWLARR}
      APIKEY: ${APIKEY_PROWLARR}
      PROWLARR_BACKFILL: true
      ENABLE_ADDITIONAL_METRICS: true
    networks:
      - monitoring
      - gluetun
    ports:
      - 9710:9710
    restart: unless-stopped
    # -------------------------------------------------------------------------------------------------------
  qbittorrent-exporter:
    image: ghcr.io/esanchezm/prometheus-qbittorrent-exporter:v1.5.1
    container_name: qbittorrent-exporter
    networks:
      - gluetun
      - monitoring
    environment:
      - QBITTORRENT_PORT=${QBITTORRENT_PORT}
      - QBITTORRENT_HOST=${QBITTORRENT_HOST}
      - QBITTORRENT_USER=${QBITTORRENT_USER}
      - QBITTORRENT_PASS=${QBITTORRENT_PASS}
    ports:
      - 8000:8000
    restart: unless-stopped
    # -------------------------------------------------------------------------------------------------------
  nzbget_exporter:
    container_name: nzbget_exporter
    image: frebib/nzbget-exporter:3.19
    tty: true
    environment:
      - NZBGET_HOST=${NZBGET_HOST}
      - NZBGET_USERNAME=${NZBGET_USER}
      - NZBGET_PASSWORD=${NZBGET_PASS}
    ports:
      - 9452:9452
    networks:
      - monitoring
      - gluetun
      # -------------------------------------------------------------------------------------------------------
networks:
  monitoring:
    external: true
  gluetun:
    external: true
  proxy:
    external: true
  backend:
    external: true
# ---------------------------------------------------------------------------------------------------
